{"ast":null,"code":"// Returns the specific color that should be used according to the theme.\n// If 'dark' is supplied, it takes precedence over 'theme.dark'.\n// Can return undefined.\nvar _normalizeColor = function normalizeColor(color, theme, dark) {\n  var colorSpec = theme.global && theme.global.colors[color] !== undefined ? theme.global.colors[color] : color;\n  // If the color has a light or dark object, use that\n  var result = colorSpec;\n  if (colorSpec) {\n    if ((dark === true || dark === undefined && theme.dark) && colorSpec.dark !== undefined) {\n      result = colorSpec.dark;\n    } else if ((dark === false || !theme.dark) && colorSpec.light !== undefined) {\n      result = colorSpec.light;\n    }\n  }\n  // allow one level of indirection in color names\n  if (result && theme.global && theme.global.colors[result] !== undefined) {\n    result = _normalizeColor(result, theme, dark);\n  }\n  return result;\n};\nexport { _normalizeColor as normalizeColor };\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.length < 7 // 7 is what's needed for '#RRGGBB'\n  ? color.match(/[A-Za-z0-9]{1}/g).map(function (v) {\n    return parseInt(\"\" + v + v, 16);\n  }) :\n  // https://stackoverflow.com/a/42429333\n  color.match(/[A-Za-z0-9]{2}/g).map(function (v) {\n    return parseInt(v, 16);\n  });\n};\n\n// From: https://stackoverflow.com/a/9493060/8513067\n// Converts an HSL color value to RGB. Conversion formula\n// adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n// Assumes h, s, and l are contained in the set [0, 1] and\n// returns r, g, and b in the set [0, 255].\nvar hslToRGB = function hslToRGB(h, s, l) {\n  var r;\n  var g;\n  var b;\n  if (s === 0 || s === '0') {\n    // achromatic\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, inT) {\n      var t = inT;\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 0.16666667) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 0.66666667) return p + (q - p) * (0.66666667 - t) * 6;\n      return p;\n    };\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 0.33333333);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 0.33333333);\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\n// allow for alpha: #RGB, #RGBA, #RRGGBB, or #RRGGBBAA\nvar hexExp = /^#[A-Za-z0-9]{3,4}$|^#[A-Za-z0-9]{6,8}$/;\nvar rgbExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?\\)/;\nvar rgbaExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([.0-9]*)\\s?\\)/;\n// e.g. hsl(240, 60%, 50%)\nvar hslExp = /^hsla?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)%?\\s?,\\s?([0-9]*)%?\\s?.*?\\)/;\nexport var canExtractRGBArray = function canExtractRGBArray(color) {\n  return hexExp.test(color) || rgbExp.test(color) || rgbaExp.test(color) || hslExp.test(color);\n};\nexport var getRGBArray = function getRGBArray(color) {\n  if (hexExp.test(color)) {\n    var _parseHexToRGB = parseHexToRGB(color),\n      red = _parseHexToRGB[0],\n      green = _parseHexToRGB[1],\n      blue = _parseHexToRGB[2],\n      alpha = _parseHexToRGB[3];\n    return [red, green, blue, alpha !== undefined ? alpha / 255.0 : undefined];\n  }\n  var match = color.match(rgbExp);\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    });\n  }\n  match = color.match(rgbaExp);\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseFloat(v, 10);\n    });\n  }\n  match = color.match(hslExp);\n  if (match) {\n    var _match$splice$map = match.splice(1).map(function (v) {\n        return parseInt(v, 10);\n      }),\n      h = _match$splice$map[0],\n      s = _match$splice$map[1],\n      l = _match$splice$map[2];\n    return hslToRGB(h / 360.0, s / 100.0, l / 100.0);\n  }\n  return color;\n};\nexport var colorIsDark = function colorIsDark(color) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray = getRGBArray(color),\n      red = _getRGBArray[0],\n      green = _getRGBArray[1],\n      blue = _getRGBArray[2],\n      alpha = _getRGBArray[3];\n    // if there is an alpha and it's greater than 50%, we can't really tell\n    if (alpha < 0.5) return undefined;\n    var brightness = (299 * red + 587 * green + 114 * blue) / 1000;\n    // From: http://www.had2know.com/technology/color-contrast-calculator-web-design.html\n    // Above domain is no longer registered.\n    return brightness < 125;\n  }\n  return undefined;\n};\nexport var getRGBA = function getRGBA(color, opacity) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray2 = getRGBArray(color),\n      red = _getRGBArray2[0],\n      green = _getRGBArray2[1],\n      blue = _getRGBArray2[2],\n      alpha = _getRGBArray2[3];\n    var normalizedAlpha;\n    if (opacity !== undefined) {\n      normalizedAlpha = opacity;\n    } else if (alpha !== undefined) {\n      normalizedAlpha = alpha;\n    } else {\n      normalizedAlpha = 1;\n    }\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + normalizedAlpha + \")\";\n  }\n  return undefined;\n};","map":{"version":3,"names":["_normalizeColor","normalizeColor","color","theme","dark","colorSpec","global","colors","undefined","result","light","parseHexToRGB","length","match","map","v","parseInt","hslToRGB","h","s","l","r","g","b","hue2rgb","p","q","inT","t","Math","round","hexExp","rgbExp","rgbaExp","hslExp","canExtractRGBArray","test","getRGBArray","_parseHexToRGB","red","green","blue","alpha","splice","parseFloat","_match$splice$map","colorIsDark","_getRGBArray","brightness","getRGBA","opacity","_getRGBArray2","normalizedAlpha"],"sources":["C:/Users/michaejo/Documents/GitRepos/player-api/node_modules/grommet/es6/utils/colors.js"],"sourcesContent":["// Returns the specific color that should be used according to the theme.\n// If 'dark' is supplied, it takes precedence over 'theme.dark'.\n// Can return undefined.\nvar _normalizeColor = function normalizeColor(color, theme, dark) {\n  var colorSpec = theme.global && theme.global.colors[color] !== undefined ? theme.global.colors[color] : color;\n  // If the color has a light or dark object, use that\n  var result = colorSpec;\n  if (colorSpec) {\n    if ((dark === true || dark === undefined && theme.dark) && colorSpec.dark !== undefined) {\n      result = colorSpec.dark;\n    } else if ((dark === false || !theme.dark) && colorSpec.light !== undefined) {\n      result = colorSpec.light;\n    }\n  }\n  // allow one level of indirection in color names\n  if (result && theme.global && theme.global.colors[result] !== undefined) {\n    result = _normalizeColor(result, theme, dark);\n  }\n  return result;\n};\nexport { _normalizeColor as normalizeColor };\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.length < 7 // 7 is what's needed for '#RRGGBB'\n  ? color.match(/[A-Za-z0-9]{1}/g).map(function (v) {\n    return parseInt(\"\" + v + v, 16);\n  }) :\n  // https://stackoverflow.com/a/42429333\n  color.match(/[A-Za-z0-9]{2}/g).map(function (v) {\n    return parseInt(v, 16);\n  });\n};\n\n// From: https://stackoverflow.com/a/9493060/8513067\n// Converts an HSL color value to RGB. Conversion formula\n// adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n// Assumes h, s, and l are contained in the set [0, 1] and\n// returns r, g, and b in the set [0, 255].\nvar hslToRGB = function hslToRGB(h, s, l) {\n  var r;\n  var g;\n  var b;\n  if (s === 0 || s === '0') {\n    // achromatic\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, inT) {\n      var t = inT;\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 0.16666667) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 0.66666667) return p + (q - p) * (0.66666667 - t) * 6;\n      return p;\n    };\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 0.33333333);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 0.33333333);\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\n// allow for alpha: #RGB, #RGBA, #RRGGBB, or #RRGGBBAA\nvar hexExp = /^#[A-Za-z0-9]{3,4}$|^#[A-Za-z0-9]{6,8}$/;\nvar rgbExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?\\)/;\nvar rgbaExp = /^rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([.0-9]*)\\s?\\)/;\n// e.g. hsl(240, 60%, 50%)\nvar hslExp = /^hsla?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)%?\\s?,\\s?([0-9]*)%?\\s?.*?\\)/;\nexport var canExtractRGBArray = function canExtractRGBArray(color) {\n  return hexExp.test(color) || rgbExp.test(color) || rgbaExp.test(color) || hslExp.test(color);\n};\nexport var getRGBArray = function getRGBArray(color) {\n  if (hexExp.test(color)) {\n    var _parseHexToRGB = parseHexToRGB(color),\n      red = _parseHexToRGB[0],\n      green = _parseHexToRGB[1],\n      blue = _parseHexToRGB[2],\n      alpha = _parseHexToRGB[3];\n    return [red, green, blue, alpha !== undefined ? alpha / 255.0 : undefined];\n  }\n  var match = color.match(rgbExp);\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseInt(v, 10);\n    });\n  }\n  match = color.match(rgbaExp);\n  if (match) {\n    return match.splice(1).map(function (v) {\n      return parseFloat(v, 10);\n    });\n  }\n  match = color.match(hslExp);\n  if (match) {\n    var _match$splice$map = match.splice(1).map(function (v) {\n        return parseInt(v, 10);\n      }),\n      h = _match$splice$map[0],\n      s = _match$splice$map[1],\n      l = _match$splice$map[2];\n    return hslToRGB(h / 360.0, s / 100.0, l / 100.0);\n  }\n  return color;\n};\nexport var colorIsDark = function colorIsDark(color) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray = getRGBArray(color),\n      red = _getRGBArray[0],\n      green = _getRGBArray[1],\n      blue = _getRGBArray[2],\n      alpha = _getRGBArray[3];\n    // if there is an alpha and it's greater than 50%, we can't really tell\n    if (alpha < 0.5) return undefined;\n    var brightness = (299 * red + 587 * green + 114 * blue) / 1000;\n    // From: http://www.had2know.com/technology/color-contrast-calculator-web-design.html\n    // Above domain is no longer registered.\n    return brightness < 125;\n  }\n  return undefined;\n};\nexport var getRGBA = function getRGBA(color, opacity) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray2 = getRGBArray(color),\n      red = _getRGBArray2[0],\n      green = _getRGBArray2[1],\n      blue = _getRGBArray2[2],\n      alpha = _getRGBArray2[3];\n    var normalizedAlpha;\n    if (opacity !== undefined) {\n      normalizedAlpha = opacity;\n    } else if (alpha !== undefined) {\n      normalizedAlpha = alpha;\n    } else {\n      normalizedAlpha = 1;\n    }\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + normalizedAlpha + \")\";\n  }\n  return undefined;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}